<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFramework>netstandard2.0</TargetFramework>
		<EnforceCodeStyleInBuild>True</EnforceCodeStyleInBuild>
		<EnableNETAnalyzers>True</EnableNETAnalyzers>
		<AnalysisLevel>latest</AnalysisLevel>
		<LangVersion>latest</LangVersion>
		<Nullable>enable</Nullable>

		<GeneratePackageOnBuild>True</GeneratePackageOnBuild>
		<PackageIcon>sqlwrapper.png</PackageIcon>
		<Title>SQL Wrapper Generator</Title>
		<Version>2.2</Version>
		<AssemblyVersion>2.2</AssemblyVersion>
		<FileVersion>2.2</FileVersion>
		<Authors>DAIKOZ</Authors>
		<Description>SQLWrapper makes it easier to create code wrappers for SQL queries. It's a powerful tool that helps speed up development by reducing the need for manual coding. It works with databases various SQL database (MySQL, MariaDB, ...), checking the syntax and performance of SQL queries before you execute them.

It's important to note that SQLWrapper isn't like other tools that map objects to database tables (ORMs). Instead, it directly generates code from your SQL queries and database structure, which performs better than tools like LINQ, EntityFramework, dapper, ... and doesn't have the same limitations.

One feature is that it can look at your database's structure to check if your SQL queries are correct, and it can create an XML file listing all the data your queries need and return. Then, you can use XSLT templates to turn that XML into code in languages like C#, and more.

Overall, DAIKOZ.SQLWrapper is a handy tool for making SQL code easier to work with, saving time, and helping you write better code.</Description>
		<Copyright>Copyright (c) DAIKOZ. All rights reserved.</Copyright>
		<PackageProjectUrl>https://www.sqlwrapper.com</PackageProjectUrl>
		<PackageReadmeFile>readme.md</PackageReadmeFile>
		<RepositoryUrl>https://github.com/daikoz/SQLWrapper</RepositoryUrl>
		<RepositoryType>github</RepositoryType>
		<PackageTags>sql;wrapper;sqlwrapper;ORM;dapper;linq;database;mysql;mariadb;server;mssql;pgsql;sqlite;postgres;postgresql;query;builder</PackageTags>
		<PackageReleaseNotes>
			# Changelog

			## [2.2] (2024-08-02)

			### SQLWrapper
			- Replace isnull by nullable attribute for database type

			### Template
			- **Database VB**: add new template database-vb-ado.xslt and sql-vb-ado.xslt to generate Visual Basic .Net wrapper
			- Unify isnull and nullable for database type
			- **sql-csharp-ado.xslt**: Read data asyn (await reader.ReadAsync())
			- **Rename template** to use this rules:
				* database or sql: use database for template to apply to all database and use sql for template to apply on SQL queries
				* language: charp, vb, ...
				* type: ado
			- **Template available**:
				* **database-csharp-ado.xslt**: generate a database helper from schema xml in C# ADO
				* **database-vb-ado.xslt**: generate a database helper from schema xml in Visual Basic ADO
				* **sql-cshapr-ado.xslt**: generate a SQL query wrapper from schema xml and SQL query in C# ADO
				* **sql-vb-ado.xslt**: generate a SQL query wrapper from schema xml and SQL query in Visual Basic ADO
		</PackageReleaseNotes>
		<PackageLicenseFile>license.txt</PackageLicenseFile>
		<PackageRequireLicenseAcceptance>true</PackageRequireLicenseAcceptance>

	</PropertyGroup>

	<Target Name="PostClean" AfterTargets="Clean">
		<RemoveDir Directories="$(BaseOutputPath)" />
		<RemoveDir Directories="$(BaseIntermediateOutputPath)" />
	</Target>

	<ItemGroup>
		<Content Include="build\*.targets" PackagePath="build\" />
	</ItemGroup>

	<ItemGroup>
		<Content Include="tools/**/*.*" PackagePath="tools\" />
	</ItemGroup>

	<ItemGroup>
		<None Include="..\..\Web\SQLWrapper.com\wwwroot\img\sqlwrapper.png" Pack="true" PackagePath="\" />
		<None Include="readme.md" Pack="true" PackagePath="\" />
		<None Include="license.txt" Pack="true" PackagePath="\" />
	</ItemGroup>

	<ItemGroup>
		<PackageReference Include="Microsoft.Build.Utilities.Core" Version="17.10.4" />
	</ItemGroup>

	<ItemGroup>
		<Compile Update="Resource.Designer.cs">
			<DesignTime>True</DesignTime>
			<AutoGen>True</AutoGen>
			<DependentUpon>Resource.resx</DependentUpon>
		</Compile>
	</ItemGroup>

	<ItemGroup>
		<EmbeddedResource Update="Resource.resx">
			<Generator>ResXFileCodeGenerator</Generator>
			<LastGenOutput>Resource.Designer.cs</LastGenOutput>
		</EmbeddedResource>
	</ItemGroup>

	<Target Name="CopyReadme" BeforeTargets="BeforeBuild">
		<Copy SourceFiles="..\..\..\SQLWrapper\README.md" DestinationFolder="$(MSBuildProjectDirectory)" />
	</Target>

</Project>
