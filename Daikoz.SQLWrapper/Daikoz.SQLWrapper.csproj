<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFramework>netstandard2.0</TargetFramework>
		<EnforceCodeStyleInBuild>True</EnforceCodeStyleInBuild>
		<EnableNETAnalyzers>True</EnableNETAnalyzers>
		<AnalysisLevel>latest</AnalysisLevel>
		<LangVersion>latest</LangVersion>
		<Nullable>enable</Nullable>

		<GeneratePackageOnBuild>True</GeneratePackageOnBuild>
		<PackageIcon>sqlwrapper.png</PackageIcon>
		<Title>SQL Wrapper Generator</Title>
		<Version>2.0.1</Version>
		<AssemblyVersion>2.0.1</AssemblyVersion>
		<FileVersion>2.0.1</FileVersion>
		<Authors>DAIKOZ</Authors>
		<Description>SQLWrapper makes it easier to create code wrappers for SQL queries. It's a powerful tool that helps speed up development by reducing the need for manual coding. It works with databases various SQL database (MySQL, MariaDB, ...), checking the syntax and performance of SQL queries before you execute them.

It's important to note that SQLWrapper isn't like other tools that map objects to database tables (ORMs). Instead, it directly generates code from your SQL queries and database structure, which performs better than tools like LINQ, EntityFramework, dapper, ... and doesn't have the same limitations.

One feature is that it can look at your database's structure to check if your SQL queries are correct, and it can create an XML file listing all the data your queries need and return. Then, you can use XSLT templates to turn that XML into code in languages like C#, and more.

Overall, DAIKOZ.SQLWrapper is a handy tool for making SQL code easier to work with, saving time, and helping you write better code.</Description>
		<Copyright>Copyright (c) DAIKOZ. All rights reserved.</Copyright>
		<PackageProjectUrl>https://www.sqlwrapper.com</PackageProjectUrl>
		<PackageReadmeFile>readme.md</PackageReadmeFile>
		<RepositoryUrl>https://github.com/daikoz/SQLWrapper</RepositoryUrl>
		<RepositoryType>github</RepositoryType>
		<PackageTags>sql;wrapper;sqlwrapper;ORM;dapper;linq;database;mysql;mariadb;server;mssql;pgsql;sqlite;postgres;postgresql;query;builder</PackageTags>
		<PackageReleaseNotes># Changelog

## [2.0.1] (2024-04-12)

### SQLWrapper
- Order caseinsentive input SQL variables.
- Enhance display warning message
- MariaDB/MySQL: Fix UNION column checking with BOOL, INT, INTEGER type

### Daikoz.SQLWrapper NuGet Package
- Visual Studio can generate wrapper in background
- Fix compilation error after clean the project, the generated source is now added to compile process. Don't need to build again the project.
- Enhance display warning message
- Update readme.md

### Template
- **C# Helper**: Use int type for length or long instead of uint to avoid int cast with index of string function.
- **C# Helper**: Rename SQLWrapper::UpdateIfModified to SQLWrapperHelper::UpdateIfModified method and move it in same namespace to avoid warning this Daikoz.SQLWrapper NuGet package.
- **C# Helper**: Fix tab/space mix
- **C# Helper**: Fix spaces
</PackageReleaseNotes>
		<PackageLicenseFile>license.txt</PackageLicenseFile>
		<PackageRequireLicenseAcceptance>true</PackageRequireLicenseAcceptance>

	</PropertyGroup>

	<Target Name="PostClean" AfterTargets="Clean">
		<RemoveDir Directories="$(BaseOutputPath)" />
		<RemoveDir Directories="$(BaseIntermediateOutputPath)" />
	</Target>

	<ItemGroup>
		<Content Include="build\*.targets" PackagePath="build\" />
	</ItemGroup>

	<ItemGroup>
		<Content Include="tools/**/*.*" PackagePath="tools\" />
	</ItemGroup>

	<ItemGroup>
		<None Include="..\..\Web\SQLWrapper.com\wwwroot\img\sqlwrapper.png" Pack="true" PackagePath="\" />
		<None Include="readme.md" Pack="true" PackagePath="\" />
		<None Include="license.txt" Pack="true" PackagePath="\" />
	</ItemGroup>

	<ItemGroup>
		<PackageReference Include="Microsoft.Build.Utilities.Core" Version="17.9.5" />
	</ItemGroup>

	<ItemGroup>
		<Compile Update="Resource.Designer.cs">
			<DesignTime>True</DesignTime>
			<AutoGen>True</AutoGen>
			<DependentUpon>Resource.resx</DependentUpon>
		</Compile>
	</ItemGroup>

	<ItemGroup>
		<EmbeddedResource Update="Resource.resx">
			<Generator>ResXFileCodeGenerator</Generator>
			<LastGenOutput>Resource.Designer.cs</LastGenOutput>
		</EmbeddedResource>
	</ItemGroup>

	<Target Name="CopyReadme" BeforeTargets="BeforeBuild">
		<Copy SourceFiles="..\..\..\SQLWrapper\README.md" DestinationFolder="$(MSBuildProjectDirectory)" />
	</Target>

</Project>
